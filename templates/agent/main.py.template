#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Day [X]: [Agent Name]

This agent [brief description of what the agent does].
"""

import os
import sys
from dotenv import load_dotenv

# Uncomment the framework you're using
# LangChain imports
from langchain.llms import OpenAI
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate

# LlamaIndex imports
# from llama_index import VectorStoreIndex, SimpleDirectoryReader
# from llama_index.llms import OpenAI as LlamaOpenAI

# CrewAI imports
# from crewai import Agent, Task, Crew

# Load environment variables
load_dotenv()

# Check for API keys
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    print("Error: OPENAI_API_KEY not found in environment variables.")
    print("Please add it to your .env file or set it as an environment variable.")
    sys.exit(1)


class Agent:
    """[Agent Name] implementation."""

    def __init__(self, model_name="gpt-3.5-turbo", temperature=0.7):
        """Initialize the agent with the specified model.
        
        Args:
            model_name (str): The name of the LLM model to use
            temperature (float): The temperature setting for the LLM
        """
        self.llm = OpenAI(model_name=model_name, temperature=temperature)
        
        # Define your prompt template
        self.prompt_template = PromptTemplate(
            input_variables=["input"],
            template="""You are [Agent Name], an AI assistant that [describe what the agent does].
            
            [Additional context or instructions for the agent]
            
            User input: {input}
            
            [Agent Name]:"""
        )
        
        # Create the chain
        self.chain = LLMChain(llm=self.llm, prompt=self.prompt_template)
    
    def run(self, user_input):
        """Process the user input and generate a response.
        
        Args:
            user_input (str): The input from the user
            
        Returns:
            str: The agent's response
        """
        response = self.chain.run(input=user_input)
        return response


def main():
    """Main function to run the agent."""
    print("Welcome to [Agent Name]!")
    print("[Brief description of what this agent can do]")
    print("Type 'exit' to quit.\n")
    
    agent = Agent()
    
    while True:
        user_input = input("\nYou: ")
        if user_input.lower() in ["exit", "quit", "bye"]:
            print("\nThank you for using [Agent Name]. Goodbye!")
            break
        
        response = agent.run(user_input)
        print(f"\n[Agent Name]: {response}")


if __name__ == "__main__":
    main()
