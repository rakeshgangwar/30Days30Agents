paths:
  /api/v2/check-permission/:
    get:
      operationId: check_permission_retrieve
      description: Checks whether the user has a django permission
      parameters:
      - in: query
        name: permission
        schema:
          type: string
        description: The name of the django permission such as "exercises.change_muscle"
      tags:
      - check-permission
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionResponse'
          description: ''
        '400':
          description: Please pass a permission name in the 'permission' parameter
  /api/v2/day/:
    get:
      operationId: day_list
      description: API endpoint for routine day objects
      parameters:
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: is_rest
        schema:
          type: boolean
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: need_logs_to_advance
        schema:
          type: boolean
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: order
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - day
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDayList'
          description: ''
    post:
      operationId: day_create
      description: Check for creation (PUT, POST)
      tags:
      - day
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DayRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DayRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DayRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Day'
          description: ''
  /api/v2/day/{id}/:
    get:
      operationId: day_retrieve
      description: API endpoint for routine day objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this day.
        required: true
      tags:
      - day
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Day'
          description: ''
    put:
      operationId: day_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this day.
        required: true
      tags:
      - day
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DayRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DayRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DayRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Day'
          description: ''
    patch:
      operationId: day_partial_update
      description: API endpoint for routine day objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this day.
        required: true
      tags:
      - day
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDayRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDayRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDayRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Day'
          description: ''
    delete:
      operationId: day_destroy
      description: API endpoint for routine day objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this day.
        required: true
      tags:
      - day
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/deletion-log/:
    get:
      operationId: deletion_log_list
      description: |-
        API endpoint for exercise deletion logs

        This lists objects that where deleted on a wger instance and should be deleted
        as well when performing a sync (e.g. because many exercises where submitted at
        once or an image was uploaded that hasn't a CC license)
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: model_type
        schema:
          type: string
          enum:
          - base
          - image
          - translation
          - video
        description: |-
          * `base` - base
          * `translation` - translation
          * `image` - image
          * `video` - video
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - deletion-log
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDeletionLogList'
          description: ''
  /api/v2/deletion-log/{id}/:
    get:
      operationId: deletion_log_retrieve
      description: |-
        API endpoint for exercise deletion logs

        This lists objects that where deleted on a wger instance and should be deleted
        as well when performing a sync (e.g. because many exercises where submitted at
        once or an image was uploaded that hasn't a CC license)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this deletion log.
        required: true
      tags:
      - deletion-log
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletionLog'
          description: ''
  /api/v2/equipment/:
    get:
      operationId: equipment_list
      description: API endpoint for equipment objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - equipment
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEquipmentList'
          description: ''
  /api/v2/equipment/{id}/:
    get:
      operationId: equipment_retrieve
      description: API endpoint for equipment objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this equipment.
        required: true
      tags:
      - equipment
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
          description: ''
  /api/v2/exercise/:
    get:
      operationId: exercise_list
      description: |-
        API endpoint for exercise objects.

        For a read-only endpoint with all the information of an exercise, see /api/v2/exerciseinfo/
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: equipment
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: muscles
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: muscles_secondary
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - exercise
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseBaseList'
          description: ''
    post:
      operationId: exercise_create
      description: |-
        API endpoint for exercise objects.

        For a read-only endpoint with all the information of an exercise, see /api/v2/exerciseinfo/
      tags:
      - exercise
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseBaseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseBaseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseBaseRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseBase'
          description: ''
  /api/v2/exercise-translation/:
    get:
      operationId: exercise_translation_list
      description: API endpoint for editing or adding exercise translation objects.
      parameters:
      - in: query
        name: created
        schema:
          type: string
          format: date-time
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: exercise
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: uuid
        schema:
          type: string
          format: uuid
      tags:
      - exercise-translation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseTranslationList'
          description: ''
    post:
      operationId: exercise_translation_create
      description: API endpoint for editing or adding exercise translation objects.
      tags:
      - exercise-translation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseTranslationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseTranslationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseTranslationRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseTranslation'
          description: ''
  /api/v2/exercise-translation/{id}/:
    get:
      operationId: exercise_translation_retrieve
      description: API endpoint for editing or adding exercise translation objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this translation.
        required: true
      tags:
      - exercise-translation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseTranslation'
          description: ''
    put:
      operationId: exercise_translation_update
      description: API endpoint for editing or adding exercise translation objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this translation.
        required: true
      tags:
      - exercise-translation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseTranslationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseTranslationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseTranslationRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseTranslation'
          description: ''
    patch:
      operationId: exercise_translation_partial_update
      description: API endpoint for editing or adding exercise translation objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this translation.
        required: true
      tags:
      - exercise-translation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExerciseTranslationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExerciseTranslationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExerciseTranslationRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseTranslation'
          description: ''
    delete:
      operationId: exercise_translation_destroy
      description: API endpoint for editing or adding exercise translation objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this translation.
        required: true
      tags:
      - exercise-translation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/exercise/{id}/:
    get:
      operationId: exercise_retrieve
      description: |-
        API endpoint for exercise objects.

        For a read-only endpoint with all the information of an exercise, see /api/v2/exerciseinfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise.
        required: true
      tags:
      - exercise
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseBase'
          description: ''
    put:
      operationId: exercise_update
      description: |-
        API endpoint for exercise objects.

        For a read-only endpoint with all the information of an exercise, see /api/v2/exerciseinfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise.
        required: true
      tags:
      - exercise
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseBaseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseBaseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseBaseRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseBase'
          description: ''
    patch:
      operationId: exercise_partial_update
      description: |-
        API endpoint for exercise objects.

        For a read-only endpoint with all the information of an exercise, see /api/v2/exerciseinfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise.
        required: true
      tags:
      - exercise
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExerciseBaseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExerciseBaseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExerciseBaseRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseBase'
          description: ''
    delete:
      operationId: exercise_destroy
      description: |-
        API endpoint for exercise objects.

        For a read-only endpoint with all the information of an exercise, see /api/v2/exerciseinfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise.
        required: true
      tags:
      - exercise
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/exercise/search/:
    get:
      operationId: exercise_search_retrieve
      description: |-
        Searches for exercises.

        This format is currently used by the exercise search autocompleter
      parameters:
      - in: query
        name: language
        schema:
          type: string
        description: Comma separated list of language codes to search
        required: true
      - in: query
        name: term
        schema:
          type: string
        description: The name of the exercise to search
        required: true
      tags:
      - exercise
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseSearchResponse'
          description: ''
  /api/v2/exercisealias/:
    get:
      operationId: exercisealias_list
      description: API endpoint for exercise aliases objects
      parameters:
      - in: query
        name: alias
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: translation
        schema:
          type: integer
      tags:
      - exercisealias
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseAliasList'
          description: ''
    post:
      operationId: exercisealias_create
      description: API endpoint for exercise aliases objects
      tags:
      - exercisealias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseAliasRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseAliasRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseAliasRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseAlias'
          description: ''
  /api/v2/exercisealias/{id}/:
    get:
      operationId: exercisealias_retrieve
      description: API endpoint for exercise aliases objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this alias.
        required: true
      tags:
      - exercisealias
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseAlias'
          description: ''
    put:
      operationId: exercisealias_update
      description: API endpoint for exercise aliases objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this alias.
        required: true
      tags:
      - exercisealias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseAliasRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseAliasRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseAliasRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseAlias'
          description: ''
    patch:
      operationId: exercisealias_partial_update
      description: API endpoint for exercise aliases objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this alias.
        required: true
      tags:
      - exercisealias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExerciseAliasRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExerciseAliasRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExerciseAliasRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseAlias'
          description: ''
    delete:
      operationId: exercisealias_destroy
      description: API endpoint for exercise aliases objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this alias.
        required: true
      tags:
      - exercisealias
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/exercisecategory/:
    get:
      operationId: exercisecategory_list
      description: API endpoint for exercise categories objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - exercisecategory
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseCategoryList'
          description: ''
  /api/v2/exercisecategory/{id}/:
    get:
      operationId: exercisecategory_retrieve
      description: API endpoint for exercise categories objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise category.
        required: true
      tags:
      - exercisecategory
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseCategory'
          description: ''
  /api/v2/exercisecomment/:
    get:
      operationId: exercisecomment_list
      description: API endpoint for exercise comment objects
      parameters:
      - in: query
        name: comment
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: translation
        schema:
          type: integer
      tags:
      - exercisecomment
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseCommentList'
          description: ''
    post:
      operationId: exercisecomment_create
      description: API endpoint for exercise comment objects
      tags:
      - exercisecomment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseCommentRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseComment'
          description: ''
  /api/v2/exercisecomment/{id}/:
    get:
      operationId: exercisecomment_retrieve
      description: API endpoint for exercise comment objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise comment.
        required: true
      tags:
      - exercisecomment
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseComment'
          description: ''
    put:
      operationId: exercisecomment_update
      description: API endpoint for exercise comment objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise comment.
        required: true
      tags:
      - exercisecomment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseCommentRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseComment'
          description: ''
    patch:
      operationId: exercisecomment_partial_update
      description: API endpoint for exercise comment objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise comment.
        required: true
      tags:
      - exercisecomment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExerciseCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExerciseCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExerciseCommentRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseComment'
          description: ''
    delete:
      operationId: exercisecomment_destroy
      description: API endpoint for exercise comment objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise comment.
        required: true
      tags:
      - exercisecomment
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/exerciseimage/:
    get:
      operationId: exerciseimage_list
      description: API endpoint for exercise image objects
      parameters:
      - in: query
        name: exercise
        schema:
          type: integer
      - in: query
        name: is_main
        schema:
          type: boolean
      - in: query
        name: license
        schema:
          type: integer
      - in: query
        name: license_author
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - exerciseimage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseImageList'
          description: ''
    post:
      operationId: exerciseimage_create
      description: API endpoint for exercise image objects
      tags:
      - exerciseimage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseImageRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseImage'
          description: ''
  /api/v2/exerciseimage/{id}/:
    get:
      operationId: exerciseimage_retrieve
      description: API endpoint for exercise image objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise image.
        required: true
      tags:
      - exerciseimage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseImage'
          description: ''
    put:
      operationId: exerciseimage_update
      description: API endpoint for exercise image objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise image.
        required: true
      tags:
      - exerciseimage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseImageRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseImage'
          description: ''
    patch:
      operationId: exerciseimage_partial_update
      description: API endpoint for exercise image objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise image.
        required: true
      tags:
      - exerciseimage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExerciseImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExerciseImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExerciseImageRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseImage'
          description: ''
    delete:
      operationId: exerciseimage_destroy
      description: API endpoint for exercise image objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise image.
        required: true
      tags:
      - exerciseimage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/exerciseimage/{id}/thumbnails/:
    get:
      operationId: exerciseimage_thumbnails_retrieve
      description: Return a list of the image's thumbnails
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise image.
        required: true
      tags:
      - exerciseimage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseImage'
          description: ''
  /api/v2/exerciseinfo/:
    get:
      operationId: exerciseinfo_list
      description: |-
        Read-only info API endpoint for exercise objects, grouped by the exercise
        base. Returns nested data structures for more easy and faster parsing and
        is the recommended way to access the exercise data.
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: equipment
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: license
        schema:
          type: integer
      - in: query
        name: license_author
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: muscles
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: muscles_secondary
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: uuid
        schema:
          type: string
          format: uuid
      - in: query
        name: variations
        schema:
          type: integer
      tags:
      - exerciseinfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseInfoList'
          description: ''
  /api/v2/exerciseinfo/{id}/:
    get:
      operationId: exerciseinfo_retrieve
      description: |-
        Read-only info API endpoint for exercise objects, grouped by the exercise
        base. Returns nested data structures for more easy and faster parsing and
        is the recommended way to access the exercise data.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise.
        required: true
      tags:
      - exerciseinfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseInfo'
          description: ''
  /api/v2/gallery/:
    get:
      operationId: gallery_list
      description: API endpoint for gallery image
      parameters:
      - in: query
        name: date
        schema:
          type: string
          format: date
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - gallery
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
          description: ''
    post:
      operationId: gallery_create
      description: API endpoint for gallery image
      tags:
      - gallery
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/v2/gallery/{id}/:
    get:
      operationId: gallery_retrieve
      description: API endpoint for gallery image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - gallery
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    put:
      operationId: gallery_update
      description: API endpoint for gallery image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - gallery
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    patch:
      operationId: gallery_partial_update
      description: API endpoint for gallery image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - gallery
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedImageRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    delete:
      operationId: gallery_destroy
      description: API endpoint for gallery image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - gallery
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/ingredient/:
    get:
      operationId: ingredient_list
      description: |-
        API endpoint for ingredient objects. For a read-only endpoint with all
        the information of an ingredient, see /api/v2/ingredientinfo/
      parameters:
      - in: query
        name: carbohydrates
        schema:
          type: number
      - in: query
        name: carbohydrates_sugar
        schema:
          type: number
      - in: query
        name: code
        schema:
          type: string
      - in: query
        name: created
        schema:
          type: string
          format: date-time
      - in: query
        name: created__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: created__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: energy
        schema:
          type: integer
      - in: query
        name: fat
        schema:
          type: number
      - in: query
        name: fat_saturated
        schema:
          type: number
      - in: query
        name: fiber
        schema:
          type: number
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: language
        schema:
          type: integer
      - in: query
        name: language__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: last_imported
        schema:
          type: string
          format: date-time
      - in: query
        name: last_imported__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: last_imported__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: last_update
        schema:
          type: string
          format: date-time
      - in: query
        name: last_update__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: last_update__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: license
        schema:
          type: integer
      - in: query
        name: license_author
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: protein
        schema:
          type: number
      - in: query
        name: sodium
        schema:
          type: number
      - in: query
        name: source_name
        schema:
          type: string
      - in: query
        name: uuid
        schema:
          type: string
          format: uuid
      tags:
      - ingredient
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIngredientList'
          description: ''
  /api/v2/ingredient-image/:
    get:
      operationId: ingredient_image_list
      description: API endpoint for ingredient images
      parameters:
      - in: query
        name: ingredient__uuid
        schema:
          type: string
          format: uuid
      - in: query
        name: ingredient_id
        schema:
          type: integer
          nullable: true
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: uuid
        schema:
          type: string
          format: uuid
      tags:
      - ingredient-image
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIngredientImageList'
          description: ''
  /api/v2/ingredient-image/{id}/:
    get:
      operationId: ingredient_image_retrieve
      description: API endpoint for ingredient images
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - ingredient-image
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientImage'
          description: ''
  /api/v2/ingredient/{id}/:
    get:
      operationId: ingredient_retrieve
      description: |-
        API endpoint for ingredient objects. For a read-only endpoint with all
        the information of an ingredient, see /api/v2/ingredientinfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ingredient.
        required: true
      tags:
      - ingredient
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
          description: ''
  /api/v2/ingredient/{id}/get_values/:
    get:
      operationId: ingredient_get_values_retrieve
      description: |-
        Calculates the nutritional values for current ingredient and
        the given amount and unit.

        This function basically just performs a multiplication (in the model), and
        is a candidate to be moved to pure AJAX calls, however doing it like this
        keeps the logic nicely hidden and respects the DRY principle.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ingredient.
        required: true
      tags:
      - ingredient
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
          description: ''
  /api/v2/ingredient/search/:
    get:
      operationId: ingredient_search_retrieve
      description: |-
        Searches for ingredients.

        This format is currently used by the ingredient search autocompleter
      parameters:
      - in: query
        name: language
        schema:
          type: string
        description: Comma separated list of language codes to search
        required: true
      - in: query
        name: term
        schema:
          type: string
        description: The name of the ingredient to search"
        required: true
      tags:
      - ingredient
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientSearchResponse'
          description: ''
  /api/v2/ingredientinfo/:
    get:
      operationId: ingredientinfo_list
      description: |-
        Read-only info API endpoint for ingredient objects. Returns nested data
        structures for more easy parsing.
      parameters:
      - in: query
        name: carbohydrates
        schema:
          type: number
      - in: query
        name: carbohydrates_sugar
        schema:
          type: number
      - in: query
        name: code
        schema:
          type: string
      - in: query
        name: created
        schema:
          type: string
          format: date-time
      - in: query
        name: created__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: created__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: energy
        schema:
          type: integer
      - in: query
        name: fat
        schema:
          type: number
      - in: query
        name: fat_saturated
        schema:
          type: number
      - in: query
        name: fiber
        schema:
          type: number
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: language
        schema:
          type: integer
      - in: query
        name: language__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: last_imported
        schema:
          type: string
          format: date-time
      - in: query
        name: last_imported__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: last_imported__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: last_update
        schema:
          type: string
          format: date-time
      - in: query
        name: last_update__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: last_update__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: license
        schema:
          type: integer
      - in: query
        name: license_author
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: protein
        schema:
          type: number
      - in: query
        name: sodium
        schema:
          type: number
      - in: query
        name: source_name
        schema:
          type: string
      - in: query
        name: uuid
        schema:
          type: string
          format: uuid
      tags:
      - ingredientinfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIngredientInfoList'
          description: ''
  /api/v2/ingredientinfo/{id}/:
    get:
      operationId: ingredientinfo_retrieve
      description: |-
        Read-only info API endpoint for ingredient objects. Returns nested data
        structures for more easy parsing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ingredient.
        required: true
      tags:
      - ingredientinfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientInfo'
          description: ''
  /api/v2/ingredientinfo/{id}/get_values/:
    get:
      operationId: ingredientinfo_get_values_retrieve
      description: |-
        Calculates the nutritional values for current ingredient and
        the given amount and unit.

        This function basically just performs a multiplication (in the model), and
        is a candidate to be moved to pure AJAX calls, however doing it like this
        keeps the logic nicely hidden and respects the DRY principle.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ingredient.
        required: true
      tags:
      - ingredientinfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientInfo'
          description: ''
  /api/v2/ingredientweightunit/:
    get:
      operationId: ingredientweightunit_list
      description: API endpoint for many-to-many table ingredient-weight unit objects
      parameters:
      - in: query
        name: amount
        schema:
          type: number
      - in: query
        name: gram
        schema:
          type: integer
      - in: query
        name: ingredient
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: integer
      tags:
      - ingredientweightunit
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedIngredientWeightUnitList'
          description: ''
  /api/v2/ingredientweightunit/{id}/:
    get:
      operationId: ingredientweightunit_retrieve
      description: API endpoint for many-to-many table ingredient-weight unit objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ingredient weight unit.
        required: true
      tags:
      - ingredientweightunit
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientWeightUnit'
          description: ''
  /api/v2/language/:
    get:
      operationId: language_list
      description: API endpoint for the languages used in the application
      parameters:
      - in: query
        name: full_name
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: short_name
        schema:
          type: string
      tags:
      - language
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
          description: ''
  /api/v2/language/{id}/:
    get:
      operationId: language_retrieve
      description: API endpoint for the languages used in the application
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this language.
        required: true
      tags:
      - language
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
  /api/v2/license/:
    get:
      operationId: license_list
      description: API endpoint for license objects
      parameters:
      - in: query
        name: full_name
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: short_name
        schema:
          type: string
      - in: query
        name: url
        schema:
          type: string
      tags:
      - license
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLicenseList'
          description: ''
  /api/v2/license/{id}/:
    get:
      operationId: license_retrieve
      description: API endpoint for license objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this license.
        required: true
      tags:
      - license
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
          description: ''
  /api/v2/login/:
    post:
      operationId: login_create
      description: |-
        API login endpoint. Returns a token that can subsequently passed in the
        header.

        Note that it is recommended to use token authorization instead.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login'
          description: ''
  /api/v2/max-repetitions-config/:
    get:
      operationId: max_repetitions_config_list
      description: API endpoint for max reps config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - max-repetitions-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMaxRepetitionsConfigList'
          description: ''
    post:
      operationId: max_repetitions_config_create
      description: Check for creation (PUT, POST)
      tags:
      - max-repetitions-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxRepetitionsConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxRepetitionsConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxRepetitionsConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRepetitionsConfig'
          description: ''
  /api/v2/max-repetitions-config/{id}/:
    get:
      operationId: max_repetitions_config_retrieve
      description: API endpoint for max reps config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max repetitions config.
        required: true
      tags:
      - max-repetitions-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRepetitionsConfig'
          description: ''
    put:
      operationId: max_repetitions_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max repetitions config.
        required: true
      tags:
      - max-repetitions-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxRepetitionsConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxRepetitionsConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxRepetitionsConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRepetitionsConfig'
          description: ''
    patch:
      operationId: max_repetitions_config_partial_update
      description: API endpoint for max reps config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max repetitions config.
        required: true
      tags:
      - max-repetitions-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMaxRepetitionsConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMaxRepetitionsConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMaxRepetitionsConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRepetitionsConfig'
          description: ''
    delete:
      operationId: max_repetitions_config_destroy
      description: API endpoint for max reps config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max repetitions config.
        required: true
      tags:
      - max-repetitions-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/max-rest-config/:
    get:
      operationId: max_rest_config_list
      description: API endpoint for max rest config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - max-rest-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMaxRestConfigList'
          description: ''
    post:
      operationId: max_rest_config_create
      description: Check for creation (PUT, POST)
      tags:
      - max-rest-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxRestConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxRestConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxRestConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRestConfig'
          description: ''
  /api/v2/max-rest-config/{id}/:
    get:
      operationId: max_rest_config_retrieve
      description: API endpoint for max rest config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max rest config.
        required: true
      tags:
      - max-rest-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRestConfig'
          description: ''
    put:
      operationId: max_rest_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max rest config.
        required: true
      tags:
      - max-rest-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxRestConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxRestConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxRestConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRestConfig'
          description: ''
    patch:
      operationId: max_rest_config_partial_update
      description: API endpoint for max rest config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max rest config.
        required: true
      tags:
      - max-rest-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMaxRestConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMaxRestConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMaxRestConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRestConfig'
          description: ''
    delete:
      operationId: max_rest_config_destroy
      description: API endpoint for max rest config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max rest config.
        required: true
      tags:
      - max-rest-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/max-rir-config/:
    get:
      operationId: max_rir_config_list
      description: API endpoint for set config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - max-rir-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMaxRiRConfigList'
          description: ''
    post:
      operationId: max_rir_config_create
      description: Check for creation (PUT, POST)
      tags:
      - max-rir-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxRiRConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxRiRConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxRiRConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRiRConfig'
          description: ''
  /api/v2/max-rir-config/{id}/:
    get:
      operationId: max_rir_config_retrieve
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max ri r config.
        required: true
      tags:
      - max-rir-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRiRConfig'
          description: ''
    put:
      operationId: max_rir_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max ri r config.
        required: true
      tags:
      - max-rir-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxRiRConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxRiRConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxRiRConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRiRConfig'
          description: ''
    patch:
      operationId: max_rir_config_partial_update
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max ri r config.
        required: true
      tags:
      - max-rir-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMaxRiRConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMaxRiRConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMaxRiRConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxRiRConfig'
          description: ''
    delete:
      operationId: max_rir_config_destroy
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max ri r config.
        required: true
      tags:
      - max-rir-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/max-sets-config/:
    get:
      operationId: max_sets_config_list
      description: API endpoint for max set config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - max-sets-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMaxSetNrConfigList'
          description: ''
    post:
      operationId: max_sets_config_create
      description: Check for creation (PUT, POST)
      tags:
      - max-sets-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxSetNrConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxSetNrConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxSetNrConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxSetNrConfig'
          description: ''
  /api/v2/max-sets-config/{id}/:
    get:
      operationId: max_sets_config_retrieve
      description: API endpoint for max set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max sets config.
        required: true
      tags:
      - max-sets-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxSetNrConfig'
          description: ''
    put:
      operationId: max_sets_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max sets config.
        required: true
      tags:
      - max-sets-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxSetNrConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxSetNrConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxSetNrConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxSetNrConfig'
          description: ''
    patch:
      operationId: max_sets_config_partial_update
      description: API endpoint for max set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max sets config.
        required: true
      tags:
      - max-sets-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMaxSetNrConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMaxSetNrConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMaxSetNrConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxSetNrConfig'
          description: ''
    delete:
      operationId: max_sets_config_destroy
      description: API endpoint for max set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max sets config.
        required: true
      tags:
      - max-sets-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/max-weight-config/:
    get:
      operationId: max_weight_config_list
      description: API endpoint for max weight config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - max-weight-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMaxWeightConfigList'
          description: ''
    post:
      operationId: max_weight_config_create
      description: Check for creation (PUT, POST)
      tags:
      - max-weight-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxWeightConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxWeightConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxWeightConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxWeightConfig'
          description: ''
  /api/v2/max-weight-config/{id}/:
    get:
      operationId: max_weight_config_retrieve
      description: API endpoint for max weight config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max weight config.
        required: true
      tags:
      - max-weight-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxWeightConfig'
          description: ''
    put:
      operationId: max_weight_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max weight config.
        required: true
      tags:
      - max-weight-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxWeightConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaxWeightConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaxWeightConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxWeightConfig'
          description: ''
    patch:
      operationId: max_weight_config_partial_update
      description: API endpoint for max weight config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max weight config.
        required: true
      tags:
      - max-weight-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMaxWeightConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMaxWeightConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMaxWeightConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxWeightConfig'
          description: ''
    delete:
      operationId: max_weight_config_destroy
      description: API endpoint for max weight config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this max weight config.
        required: true
      tags:
      - max-weight-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/meal/:
    get:
      operationId: meal_list
      description: API endpoint for meal objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: order
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: plan
        schema:
          type: integer
      - in: query
        name: time
        schema:
          type: string
          format: time
      tags:
      - meal
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMealList'
          description: ''
    post:
      operationId: meal_create
      description: Check for creation (PUT, POST)
      tags:
      - meal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MealRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MealRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
          description: ''
  /api/v2/meal/{id}/:
    get:
      operationId: meal_retrieve
      description: API endpoint for meal objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal.
        required: true
      tags:
      - meal
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
          description: ''
    put:
      operationId: meal_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal.
        required: true
      tags:
      - meal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MealRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MealRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
          description: ''
    patch:
      operationId: meal_partial_update
      description: API endpoint for meal objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal.
        required: true
      tags:
      - meal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMealRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMealRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMealRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
          description: ''
    delete:
      operationId: meal_destroy
      description: API endpoint for meal objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal.
        required: true
      tags:
      - meal
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/meal/{id}/nutritional_values/:
    get:
      operationId: meal_nutritional_values_retrieve
      description: Return an overview of the nutritional plan's values
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal.
        required: true
      tags:
      - meal
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
          description: ''
  /api/v2/mealitem/:
    get:
      operationId: mealitem_list
      description: API endpoint for meal item objects
      parameters:
      - in: query
        name: amount
        schema:
          type: number
      - in: query
        name: ingredient
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: meal
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: order
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: weight_unit
        schema:
          type: integer
      tags:
      - mealitem
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMealItemList'
          description: ''
    post:
      operationId: mealitem_create
      description: Check for creation (PUT, POST)
      tags:
      - mealitem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MealItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MealItemRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealItem'
          description: ''
  /api/v2/mealitem/{id}/:
    get:
      operationId: mealitem_retrieve
      description: API endpoint for meal item objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal item.
        required: true
      tags:
      - mealitem
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealItem'
          description: ''
    put:
      operationId: mealitem_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal item.
        required: true
      tags:
      - mealitem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MealItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MealItemRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealItem'
          description: ''
    patch:
      operationId: mealitem_partial_update
      description: API endpoint for meal item objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal item.
        required: true
      tags:
      - mealitem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMealItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMealItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMealItemRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealItem'
          description: ''
    delete:
      operationId: mealitem_destroy
      description: API endpoint for meal item objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal item.
        required: true
      tags:
      - mealitem
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/mealitem/{id}/nutritional_values/:
    get:
      operationId: mealitem_nutritional_values_retrieve
      description: Return an overview of the nutritional plan's values
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meal item.
        required: true
      tags:
      - mealitem
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealItem'
          description: ''
  /api/v2/measurement/:
    get:
      operationId: measurement_list
      description: API endpoint for measurements
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: category__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: date
        schema:
          type: string
          format: date
      - in: query
        name: date__gt
        schema:
          type: string
          format: date
      - in: query
        name: date__gte
        schema:
          type: string
          format: date
      - in: query
        name: date__lt
        schema:
          type: string
          format: date
      - in: query
        name: date__lte
        schema:
          type: string
          format: date
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - measurement
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMeasurementList'
          description: ''
    post:
      operationId: measurement_create
      description: API endpoint for measurements
      tags:
      - measurement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Measurement'
          description: ''
  /api/v2/measurement-category/:
    get:
      operationId: measurement_category_list
      description: API endpoint for measurement units
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
      tags:
      - measurement-category
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUnitList'
          description: ''
    post:
      operationId: measurement_category_create
      description: API endpoint for measurement units
      tags:
      - measurement-category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UnitRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UnitRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
  /api/v2/measurement-category/{id}/:
    get:
      operationId: measurement_category_retrieve
      description: API endpoint for measurement units
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - measurement-category
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    put:
      operationId: measurement_category_update
      description: API endpoint for measurement units
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - measurement-category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UnitRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UnitRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    patch:
      operationId: measurement_category_partial_update
      description: API endpoint for measurement units
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - measurement-category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUnitRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUnitRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUnitRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    delete:
      operationId: measurement_category_destroy
      description: API endpoint for measurement units
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - measurement-category
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/measurement/{id}/:
    get:
      operationId: measurement_retrieve
      description: API endpoint for measurements
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this measurement.
        required: true
      tags:
      - measurement
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Measurement'
          description: ''
    put:
      operationId: measurement_update
      description: API endpoint for measurements
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this measurement.
        required: true
      tags:
      - measurement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Measurement'
          description: ''
    patch:
      operationId: measurement_partial_update
      description: API endpoint for measurements
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this measurement.
        required: true
      tags:
      - measurement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMeasurementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMeasurementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMeasurementRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Measurement'
          description: ''
    delete:
      operationId: measurement_destroy
      description: API endpoint for measurements
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this measurement.
        required: true
      tags:
      - measurement
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/min-app-version/:
    get:
      operationId: min_app_version_retrieve
      description: Returns the minimum required version of flutter app to access this
        server.
      tags:
      - min-app-version
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /api/v2/min-server-version/:
    get:
      operationId: min_server_version_retrieve
      description: Returns the minimum required version of the server to perform sync
        requests
      tags:
      - min-server-version
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /api/v2/muscle/:
    get:
      operationId: muscle_list
      description: API endpoint for muscle objects
      parameters:
      - in: query
        name: is_front
        schema:
          type: boolean
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: name_en
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - muscle
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMuscleList'
          description: ''
  /api/v2/muscle/{id}/:
    get:
      operationId: muscle_retrieve
      description: API endpoint for muscle objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this muscle.
        required: true
      tags:
      - muscle
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Muscle'
          description: ''
  /api/v2/nutritiondiary/:
    get:
      operationId: nutritiondiary_list
      description: API endpoint for a meal log item
      parameters:
      - in: query
        name: amount
        schema:
          type: number
      - in: query
        name: datetime
        schema:
          type: string
          format: date-time
      - in: query
        name: datetime__date
        schema:
          type: string
          format: date
      - in: query
        name: datetime__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: datetime__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: datetime__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: datetime__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: ingredient
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: plan
        schema:
          type: integer
      - in: query
        name: weight_unit
        schema:
          type: integer
      tags:
      - nutritiondiary
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLogItemList'
          description: ''
    post:
      operationId: nutritiondiary_create
      description: Check for creation (PUT, POST)
      tags:
      - nutritiondiary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LogItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LogItemRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogItem'
          description: ''
  /api/v2/nutritiondiary/{id}/:
    get:
      operationId: nutritiondiary_retrieve
      description: API endpoint for a meal log item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this log item.
        required: true
      tags:
      - nutritiondiary
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogItem'
          description: ''
    put:
      operationId: nutritiondiary_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this log item.
        required: true
      tags:
      - nutritiondiary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LogItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LogItemRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogItem'
          description: ''
    patch:
      operationId: nutritiondiary_partial_update
      description: API endpoint for a meal log item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this log item.
        required: true
      tags:
      - nutritiondiary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLogItemRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLogItemRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLogItemRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogItem'
          description: ''
    delete:
      operationId: nutritiondiary_destroy
      description: API endpoint for a meal log item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this log item.
        required: true
      tags:
      - nutritiondiary
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/nutritiondiary/{id}/nutritional_values/:
    get:
      operationId: nutritiondiary_nutritional_values_retrieve
      description: Return an overview of the nutritional plan's values
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this log item.
        required: true
      tags:
      - nutritiondiary
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogItem'
          description: ''
  /api/v2/nutritionplan/:
    get:
      operationId: nutritionplan_list
      description: |-
        API endpoint for nutrition plan objects. For a read-only endpoint with all
        the information of nutritional plan(s), see /api/v2/nutritionplaninfo/
      parameters:
      - in: query
        name: creation_date
        schema:
          type: string
          format: date
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: has_goal_calories
        schema:
          type: boolean
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - nutritionplan
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNutritionPlanList'
          description: ''
    post:
      operationId: nutritionplan_create
      description: |-
        API endpoint for nutrition plan objects. For a read-only endpoint with all
        the information of nutritional plan(s), see /api/v2/nutritionplaninfo/
      tags:
      - nutritionplan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionPlanRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NutritionPlanRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NutritionPlanRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlan'
          description: ''
  /api/v2/nutritionplan/{id}/:
    get:
      operationId: nutritionplan_retrieve
      description: |-
        API endpoint for nutrition plan objects. For a read-only endpoint with all
        the information of nutritional plan(s), see /api/v2/nutritionplaninfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplan
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlan'
          description: ''
    put:
      operationId: nutritionplan_update
      description: |-
        API endpoint for nutrition plan objects. For a read-only endpoint with all
        the information of nutritional plan(s), see /api/v2/nutritionplaninfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionPlanRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NutritionPlanRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NutritionPlanRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlan'
          description: ''
    patch:
      operationId: nutritionplan_partial_update
      description: |-
        API endpoint for nutrition plan objects. For a read-only endpoint with all
        the information of nutritional plan(s), see /api/v2/nutritionplaninfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNutritionPlanRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNutritionPlanRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNutritionPlanRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlan'
          description: ''
    delete:
      operationId: nutritionplan_destroy
      description: |-
        API endpoint for nutrition plan objects. For a read-only endpoint with all
        the information of nutritional plan(s), see /api/v2/nutritionplaninfo/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplan
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/nutritionplan/{id}/nutritional_values/:
    get:
      operationId: nutritionplan_nutritional_values_retrieve
      description: Return an overview of the nutritional plan's values
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplan
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlan'
          description: ''
  /api/v2/nutritionplaninfo/:
    get:
      operationId: nutritionplaninfo_list
      description: |-
        Read-only info API endpoint for nutrition plan objects. Returns nested data
        structures for more easy parsing.
      parameters:
      - in: query
        name: creation_date
        schema:
          type: string
          format: date
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: has_goal_calories
        schema:
          type: boolean
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - nutritionplaninfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNutritionPlanInfoList'
          description: ''
    post:
      operationId: nutritionplaninfo_create
      description: |-
        Read-only info API endpoint for nutrition plan objects. Returns nested data
        structures for more easy parsing.
      tags:
      - nutritionplaninfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionPlanInfoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NutritionPlanInfoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NutritionPlanInfoRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlanInfo'
          description: ''
  /api/v2/nutritionplaninfo/{id}/:
    get:
      operationId: nutritionplaninfo_retrieve
      description: |-
        Read-only info API endpoint for nutrition plan objects. Returns nested data
        structures for more easy parsing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplaninfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlanInfo'
          description: ''
    put:
      operationId: nutritionplaninfo_update
      description: |-
        Read-only info API endpoint for nutrition plan objects. Returns nested data
        structures for more easy parsing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplaninfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionPlanInfoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NutritionPlanInfoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NutritionPlanInfoRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlanInfo'
          description: ''
    patch:
      operationId: nutritionplaninfo_partial_update
      description: |-
        Read-only info API endpoint for nutrition plan objects. Returns nested data
        structures for more easy parsing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplaninfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNutritionPlanInfoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNutritionPlanInfoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNutritionPlanInfoRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlanInfo'
          description: ''
    delete:
      operationId: nutritionplaninfo_destroy
      description: |-
        Read-only info API endpoint for nutrition plan objects. Returns nested data
        structures for more easy parsing.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplaninfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/nutritionplaninfo/{id}/nutritional_values/:
    get:
      operationId: nutritionplaninfo_nutritional_values_retrieve
      description: Return an overview of the nutritional plan's values
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this nutrition plan.
        required: true
      tags:
      - nutritionplaninfo
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionPlanInfo'
          description: ''
  /api/v2/public-templates/:
    get:
      operationId: public_templates_list
      description: API endpoint for public routine templates objects
      parameters:
      - in: query
        name: created
        schema:
          type: string
          format: date-time
      - in: query
        name: description
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - public-templates
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoutineList'
          description: ''
  /api/v2/public-templates/{id}/:
    get:
      operationId: public_templates_retrieve
      description: API endpoint for public routine templates objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - public-templates
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
  /api/v2/register/:
    post:
      operationId: register_create
      description: API endpoint
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/login'
          description: ''
  /api/v2/repetitions-config/:
    get:
      operationId: repetitions_config_list
      description: API endpoint for reps config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - repetitions-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRepetitionsConfigList'
          description: ''
    post:
      operationId: repetitions_config_create
      description: Check for creation (PUT, POST)
      tags:
      - repetitions-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepetitionsConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RepetitionsConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RepetitionsConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepetitionsConfig'
          description: ''
  /api/v2/repetitions-config/{id}/:
    get:
      operationId: repetitions_config_retrieve
      description: API endpoint for reps config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this repetitions config.
        required: true
      tags:
      - repetitions-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepetitionsConfig'
          description: ''
    put:
      operationId: repetitions_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this repetitions config.
        required: true
      tags:
      - repetitions-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepetitionsConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RepetitionsConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RepetitionsConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepetitionsConfig'
          description: ''
    patch:
      operationId: repetitions_config_partial_update
      description: API endpoint for reps config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this repetitions config.
        required: true
      tags:
      - repetitions-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRepetitionsConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRepetitionsConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRepetitionsConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepetitionsConfig'
          description: ''
    delete:
      operationId: repetitions_config_destroy
      description: API endpoint for reps config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this repetitions config.
        required: true
      tags:
      - repetitions-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/rest-config/:
    get:
      operationId: rest_config_list
      description: API endpoint for set config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - rest-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRestConfigList'
          description: ''
    post:
      operationId: rest_config_create
      description: Check for creation (PUT, POST)
      tags:
      - rest-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestConfig'
          description: ''
  /api/v2/rest-config/{id}/:
    get:
      operationId: rest_config_retrieve
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this rest config.
        required: true
      tags:
      - rest-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestConfig'
          description: ''
    put:
      operationId: rest_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this rest config.
        required: true
      tags:
      - rest-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestConfig'
          description: ''
    patch:
      operationId: rest_config_partial_update
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this rest config.
        required: true
      tags:
      - rest-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRestConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRestConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRestConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestConfig'
          description: ''
    delete:
      operationId: rest_config_destroy
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this rest config.
        required: true
      tags:
      - rest-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/rir-config/:
    get:
      operationId: rir_config_list
      description: API endpoint for set config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - rir-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRiRConfigList'
          description: ''
    post:
      operationId: rir_config_create
      description: Check for creation (PUT, POST)
      tags:
      - rir-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiRConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RiRConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RiRConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiRConfig'
          description: ''
  /api/v2/rir-config/{id}/:
    get:
      operationId: rir_config_retrieve
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ri r config.
        required: true
      tags:
      - rir-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiRConfig'
          description: ''
    put:
      operationId: rir_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ri r config.
        required: true
      tags:
      - rir-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiRConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RiRConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RiRConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiRConfig'
          description: ''
    patch:
      operationId: rir_config_partial_update
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ri r config.
        required: true
      tags:
      - rir-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRiRConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRiRConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRiRConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiRConfig'
          description: ''
    delete:
      operationId: rir_config_destroy
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this ri r config.
        required: true
      tags:
      - rir-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/routine/:
    get:
      operationId: routine_list
      description: API endpoint for routine objects
      parameters:
      - in: query
        name: created
        schema:
          type: string
          format: date-time
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: end
        schema:
          type: string
          format: date
      - in: query
        name: is_public
        schema:
          type: boolean
      - in: query
        name: is_template
        schema:
          type: boolean
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: start
        schema:
          type: string
          format: date
      tags:
      - routine
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoutineList'
          description: ''
    post:
      operationId: routine_create
      description: API endpoint for routine objects
      tags:
      - routine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutineRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoutineRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoutineRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
  /api/v2/routine/{id}/:
    get:
      operationId: routine_retrieve
      description: API endpoint for routine objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
    put:
      operationId: routine_update
      description: API endpoint for routine objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutineRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RoutineRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoutineRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
    patch:
      operationId: routine_partial_update
      description: API endpoint for routine objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoutineRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoutineRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoutineRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
    delete:
      operationId: routine_destroy
      description: API endpoint for routine objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/routine/{id}/date-sequence-display/:
    get:
      operationId: routine_date_sequence_display_retrieve
      description: Return the day sequence of the routine
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
  /api/v2/routine/{id}/date-sequence-gym/:
    get:
      operationId: routine_date_sequence_gym_retrieve
      description: Return the day sequence of the routine
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
  /api/v2/routine/{id}/logs/:
    get:
      operationId: routine_logs_retrieve
      description: Returns the logs for the routine
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
  /api/v2/routine/{id}/stats/:
    get:
      operationId: routine_stats_retrieve
      description: Returns the logs for the routine
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
  /api/v2/routine/{id}/structure/:
    get:
      operationId: routine_structure_retrieve
      description: Return full object structure of the routine.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - routine
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
  /api/v2/schema:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v2/sets-config/:
    get:
      operationId: sets_config_list
      description: API endpoint for set config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - sets-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSetNrConfigList'
          description: ''
    post:
      operationId: sets_config_create
      description: Check for creation (PUT, POST)
      tags:
      - sets-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetNrConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetNrConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetNrConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetNrConfig'
          description: ''
  /api/v2/sets-config/{id}/:
    get:
      operationId: sets_config_retrieve
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sets config.
        required: true
      tags:
      - sets-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetNrConfig'
          description: ''
    put:
      operationId: sets_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sets config.
        required: true
      tags:
      - sets-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetNrConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetNrConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetNrConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetNrConfig'
          description: ''
    patch:
      operationId: sets_config_partial_update
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sets config.
        required: true
      tags:
      - sets-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSetNrConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSetNrConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSetNrConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetNrConfig'
          description: ''
    delete:
      operationId: sets_config_destroy
      description: API endpoint for set config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sets config.
        required: true
      tags:
      - sets-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/setting-repetitionunit/:
    get:
      operationId: setting_repetitionunit_list
      description: API endpoint for repetition units objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - setting-repetitionunit
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRepetitionUnitList'
          description: ''
  /api/v2/setting-repetitionunit/{id}/:
    get:
      operationId: setting_repetitionunit_retrieve
      description: API endpoint for repetition units objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this repetition unit.
        required: true
      tags:
      - setting-repetitionunit
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepetitionUnit'
          description: ''
  /api/v2/setting-weightunit/:
    get:
      operationId: setting_weightunit_list
      description: API endpoint for weight units objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - setting-weightunit
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoutineWeightUnitList'
          description: ''
  /api/v2/setting-weightunit/{id}/:
    get:
      operationId: setting_weightunit_retrieve
      description: API endpoint for weight units objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight unit.
        required: true
      tags:
      - setting-weightunit
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutineWeightUnit'
          description: ''
  /api/v2/slot/:
    get:
      operationId: slot_list
      description: API endpoint for routine slot objects
      parameters:
      - in: query
        name: comment
        schema:
          type: string
      - in: query
        name: day
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: order
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - slot
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSlotList'
          description: ''
    post:
      operationId: slot_create
      description: Check for creation (PUT, POST)
      tags:
      - slot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SlotRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SlotRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
          description: ''
  /api/v2/slot-entry/:
    get:
      operationId: slot_entry_list
      description: API endpoint for routine slot entry objects
      parameters:
      - in: query
        name: comment
        schema:
          type: string
      - in: query
        name: exercise
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: order
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: repetition_rounding
        schema:
          type: number
      - in: query
        name: repetition_unit
        schema:
          type: integer
      - in: query
        name: slot
        schema:
          type: integer
      - in: query
        name: type
        schema:
          type: string
          enum:
          - dropset
          - forced
          - iso
          - jump
          - myo
          - normal
          - partial
          - tut
        description: |-
          * `normal` - Normal
          * `dropset` - Dropset
          * `myo` - Myo
          * `partial` - Partial
          * `forced` - Forced
          * `tut` - Tut
          * `iso` - Iso Hold
          * `jump` - Jump
      - in: query
        name: weight_rounding
        schema:
          type: number
      - in: query
        name: weight_unit
        schema:
          type: integer
      tags:
      - slot-entry
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSlotEntryList'
          description: ''
    post:
      operationId: slot_entry_create
      description: Check for creation (PUT, POST)
      tags:
      - slot-entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotEntryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SlotEntryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SlotEntryRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotEntry'
          description: ''
  /api/v2/slot-entry/{id}/:
    get:
      operationId: slot_entry_retrieve
      description: API endpoint for routine slot entry objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this slot entry.
        required: true
      tags:
      - slot-entry
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotEntry'
          description: ''
    put:
      operationId: slot_entry_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this slot entry.
        required: true
      tags:
      - slot-entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotEntryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SlotEntryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SlotEntryRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotEntry'
          description: ''
    patch:
      operationId: slot_entry_partial_update
      description: API endpoint for routine slot entry objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this slot entry.
        required: true
      tags:
      - slot-entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlotEntryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlotEntryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlotEntryRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotEntry'
          description: ''
    delete:
      operationId: slot_entry_destroy
      description: API endpoint for routine slot entry objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this slot entry.
        required: true
      tags:
      - slot-entry
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/slot/{id}/:
    get:
      operationId: slot_retrieve
      description: API endpoint for routine slot objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this slot.
        required: true
      tags:
      - slot
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
          description: ''
    put:
      operationId: slot_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this slot.
        required: true
      tags:
      - slot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SlotRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SlotRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
          description: ''
    patch:
      operationId: slot_partial_update
      description: API endpoint for routine slot objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this slot.
        required: true
      tags:
      - slot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlotRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlotRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlotRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
          description: ''
    delete:
      operationId: slot_destroy
      description: API endpoint for routine slot objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this slot.
        required: true
      tags:
      - slot
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/templates/:
    get:
      operationId: templates_list
      description: API endpoint for routine template objects
      parameters:
      - in: query
        name: created
        schema:
          type: string
          format: date-time
      - in: query
        name: description
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - templates
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoutineList'
          description: ''
  /api/v2/templates/{id}/:
    get:
      operationId: templates_retrieve
      description: API endpoint for routine template objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this routine.
        required: true
      tags:
      - templates
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routine'
          description: ''
  /api/v2/token:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v2/token/refresh:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v2/token/verify:
    post:
      operationId: token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /api/v2/userprofile/:
    get:
      operationId: userprofile_list
      description: Customized list view, that returns only the current user's data
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - userprofile
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserprofileList'
          description: ''
    post:
      operationId: userprofile_create
      description: |-
        API endpoint for the user profile

        This endpoint works somewhat differently than the others since it always
        returns the data for the currently logged-in user's profile. To update
        the profile, use a POST request with the new data, not a PATCH.
      tags:
      - userprofile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserprofileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserprofileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserprofileRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userprofile'
          description: ''
  /api/v2/userprofile/{id}/:
    get:
      operationId: userprofile_retrieve
      description: |-
        API endpoint for the user profile

        This endpoint works somewhat differently than the others since it always
        returns the data for the currently logged-in user's profile. To update
        the profile, use a POST request with the new data, not a PATCH.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user profile.
        required: true
      tags:
      - userprofile
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userprofile'
          description: ''
    put:
      operationId: userprofile_update
      description: |-
        API endpoint for the user profile

        This endpoint works somewhat differently than the others since it always
        returns the data for the currently logged-in user's profile. To update
        the profile, use a POST request with the new data, not a PATCH.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user profile.
        required: true
      tags:
      - userprofile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserprofileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserprofileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserprofileRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userprofile'
          description: ''
    patch:
      operationId: userprofile_partial_update
      description: |-
        API endpoint for the user profile

        This endpoint works somewhat differently than the others since it always
        returns the data for the currently logged-in user's profile. To update
        the profile, use a POST request with the new data, not a PATCH.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user profile.
        required: true
      tags:
      - userprofile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserprofileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserprofileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserprofileRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userprofile'
          description: ''
    delete:
      operationId: userprofile_destroy
      description: |-
        API endpoint for the user profile

        This endpoint works somewhat differently than the others since it always
        returns the data for the currently logged-in user's profile. To update
        the profile, use a POST request with the new data, not a PATCH.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user profile.
        required: true
      tags:
      - userprofile
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/userprofile/verify-email/:
    get:
      operationId: userprofile_verify_email_retrieve
      description: Return the username
      tags:
      - userprofile
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userprofile'
          description: ''
  /api/v2/variation/:
    get:
      operationId: variation_list
      description: API endpoint for exercise variation objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - variation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseVariationList'
          description: ''
    post:
      operationId: variation_create
      description: API endpoint for exercise variation objects
      tags:
      - variation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseVariation'
          description: ''
  /api/v2/variation/{id}/:
    get:
      operationId: variation_retrieve
      description: API endpoint for exercise variation objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this variation.
        required: true
      tags:
      - variation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseVariation'
          description: ''
    put:
      operationId: variation_update
      description: API endpoint for exercise variation objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this variation.
        required: true
      tags:
      - variation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseVariation'
          description: ''
    patch:
      operationId: variation_partial_update
      description: API endpoint for exercise variation objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this variation.
        required: true
      tags:
      - variation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseVariation'
          description: ''
    delete:
      operationId: variation_destroy
      description: API endpoint for exercise variation objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this variation.
        required: true
      tags:
      - variation
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/version/:
    get:
      operationId: version_retrieve
      description: Returns the application's version
      tags:
      - version
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: ''
  /api/v2/video/:
    get:
      operationId: video_list
      description: API endpoint for exercise video objects
      parameters:
      - in: query
        name: exercise
        schema:
          type: integer
      - in: query
        name: is_main
        schema:
          type: boolean
      - in: query
        name: license
        schema:
          type: integer
      - in: query
        name: license_author
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - video
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExerciseVideoList'
          description: ''
    post:
      operationId: video_create
      description: API endpoint for exercise video objects
      tags:
      - video
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseVideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseVideoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseVideoRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseVideo'
          description: ''
  /api/v2/video/{id}/:
    get:
      operationId: video_retrieve
      description: API endpoint for exercise video objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise video.
        required: true
      tags:
      - video
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseVideo'
          description: ''
    put:
      operationId: video_update
      description: API endpoint for exercise video objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise video.
        required: true
      tags:
      - video
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseVideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ExerciseVideoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ExerciseVideoRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseVideo'
          description: ''
    patch:
      operationId: video_partial_update
      description: API endpoint for exercise video objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise video.
        required: true
      tags:
      - video
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedExerciseVideoRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedExerciseVideoRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedExerciseVideoRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseVideo'
          description: ''
    delete:
      operationId: video_destroy
      description: API endpoint for exercise video objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this exercise video.
        required: true
      tags:
      - video
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/weight-config/:
    get:
      operationId: weight_config_list
      description: API endpoint for weight config objects
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - weight-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWeightConfigList'
          description: ''
    post:
      operationId: weight_config_create
      description: Check for creation (PUT, POST)
      tags:
      - weight-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeightConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WeightConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WeightConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightConfig'
          description: ''
  /api/v2/weight-config/{id}/:
    get:
      operationId: weight_config_retrieve
      description: API endpoint for weight config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight config.
        required: true
      tags:
      - weight-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightConfig'
          description: ''
    put:
      operationId: weight_config_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight config.
        required: true
      tags:
      - weight-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeightConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WeightConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WeightConfigRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightConfig'
          description: ''
    patch:
      operationId: weight_config_partial_update
      description: API endpoint for weight config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight config.
        required: true
      tags:
      - weight-config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWeightConfigRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWeightConfigRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWeightConfigRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightConfig'
          description: ''
    delete:
      operationId: weight_config_destroy
      description: API endpoint for weight config objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight config.
        required: true
      tags:
      - weight-config
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/weightentry/:
    get:
      operationId: weightentry_list
      description: API endpoint for nutrition plan objects
      parameters:
      - in: query
        name: date
        schema:
          type: string
          format: date
      - in: query
        name: date__gt
        schema:
          type: string
          format: date
      - in: query
        name: date__gte
        schema:
          type: string
          format: date
      - in: query
        name: date__lt
        schema:
          type: string
          format: date
      - in: query
        name: date__lte
        schema:
          type: string
          format: date
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: weight
        schema:
          type: number
      - in: query
        name: weight__gt
        schema:
          type: number
      - in: query
        name: weight__gte
        schema:
          type: number
      - in: query
        name: weight__lt
        schema:
          type: number
      - in: query
        name: weight__lte
        schema:
          type: number
      tags:
      - weightentry
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWeightEntryList'
          description: ''
    post:
      operationId: weightentry_create
      description: API endpoint for nutrition plan objects
      tags:
      - weightentry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeightEntryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WeightEntryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WeightEntryRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightEntry'
          description: ''
  /api/v2/weightentry/{id}/:
    get:
      operationId: weightentry_retrieve
      description: API endpoint for nutrition plan objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Weight entry.
        required: true
      tags:
      - weightentry
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightEntry'
          description: ''
    put:
      operationId: weightentry_update
      description: API endpoint for nutrition plan objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Weight entry.
        required: true
      tags:
      - weightentry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeightEntryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WeightEntryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WeightEntryRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightEntry'
          description: ''
    patch:
      operationId: weightentry_partial_update
      description: API endpoint for nutrition plan objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Weight entry.
        required: true
      tags:
      - weightentry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWeightEntryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWeightEntryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWeightEntryRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightEntry'
          description: ''
    delete:
      operationId: weightentry_destroy
      description: API endpoint for nutrition plan objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Weight entry.
        required: true
      tags:
      - weightentry
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/weightunit/:
    get:
      operationId: weightunit_list
      description: API endpoint for weight unit objects
      parameters:
      - in: query
        name: language
        schema:
          type: integer
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: name
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - weightunit
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWeightUnitList'
          description: ''
  /api/v2/weightunit/{id}/:
    get:
      operationId: weightunit_retrieve
      description: API endpoint for weight unit objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this weight unit.
        required: true
      tags:
      - weightunit
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightUnit'
          description: ''
  /api/v2/workoutlog/:
    get:
      operationId: workoutlog_list
      description: API endpoint for workout log objects
      parameters:
      - in: query
        name: date
        schema:
          type: string
          format: date-time
      - in: query
        name: date__date
        schema:
          type: string
          format: date
      - in: query
        name: date__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: date__gte
        schema:
          type: string
          format: date-time
      - in: query
        name: date__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: date__lte
        schema:
          type: string
          format: date-time
      - in: query
        name: exercise
        schema:
          type: integer
      - in: query
        name: exercise__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: iteration
        schema:
          type: integer
      - in: query
        name: iteration__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: repetitions
        schema:
          type: number
      - in: query
        name: repetitions__gt
        schema:
          type: number
      - in: query
        name: repetitions__gte
        schema:
          type: number
      - in: query
        name: repetitions__lt
        schema:
          type: number
      - in: query
        name: repetitions__lte
        schema:
          type: number
      - in: query
        name: repetitions_target
        schema:
          type: number
      - in: query
        name: repetitions_target__gt
        schema:
          type: number
      - in: query
        name: repetitions_target__gte
        schema:
          type: number
      - in: query
        name: repetitions_target__lt
        schema:
          type: number
      - in: query
        name: repetitions_target__lte
        schema:
          type: number
      - in: query
        name: repetitions_unit
        schema:
          type: integer
      - in: query
        name: repetitions_unit__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: rir
        schema:
          type: number
      - in: query
        name: rir__gt
        schema:
          type: number
      - in: query
        name: rir__gte
        schema:
          type: number
      - in: query
        name: rir__in
        schema:
          type: array
          items:
            type: number
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: rir__lt
        schema:
          type: number
      - in: query
        name: rir__lte
        schema:
          type: number
      - in: query
        name: rir_target
        schema:
          type: number
      - in: query
        name: rir_target__gt
        schema:
          type: number
      - in: query
        name: rir_target__gte
        schema:
          type: number
      - in: query
        name: rir_target__in
        schema:
          type: array
          items:
            type: number
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: rir_target__lt
        schema:
          type: number
      - in: query
        name: rir_target__lte
        schema:
          type: number
      - in: query
        name: routine
        schema:
          type: integer
      - in: query
        name: session
        schema:
          type: integer
      - in: query
        name: weight
        schema:
          type: number
      - in: query
        name: weight__gt
        schema:
          type: number
      - in: query
        name: weight__gte
        schema:
          type: number
      - in: query
        name: weight__lt
        schema:
          type: number
      - in: query
        name: weight__lte
        schema:
          type: number
      - in: query
        name: weight_target
        schema:
          type: number
      - in: query
        name: weight_target__gt
        schema:
          type: number
      - in: query
        name: weight_target__gte
        schema:
          type: number
      - in: query
        name: weight_target__lt
        schema:
          type: number
      - in: query
        name: weight_target__lte
        schema:
          type: number
      - in: query
        name: weight_unit
        schema:
          type: integer
      - in: query
        name: weight_unit__in
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      tags:
      - workoutlog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWorkoutLogList'
          description: ''
    post:
      operationId: workoutlog_create
      description: Check for creation (PUT, POST)
      tags:
      - workoutlog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WorkoutLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WorkoutLogRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutLog'
          description: ''
  /api/v2/workoutlog/{id}/:
    get:
      operationId: workoutlog_retrieve
      description: API endpoint for workout log objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout log.
        required: true
      tags:
      - workoutlog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutLog'
          description: ''
    put:
      operationId: workoutlog_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout log.
        required: true
      tags:
      - workoutlog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WorkoutLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WorkoutLogRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutLog'
          description: ''
    patch:
      operationId: workoutlog_partial_update
      description: API endpoint for workout log objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout log.
        required: true
      tags:
      - workoutlog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWorkoutLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWorkoutLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWorkoutLogRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutLog'
          description: ''
    delete:
      operationId: workoutlog_destroy
      description: API endpoint for workout log objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout log.
        required: true
      tags:
      - workoutlog
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v2/workoutsession/:
    get:
      operationId: workoutsession_list
      description: API endpoint for workout sessions objects
      parameters:
      - in: query
        name: date
        schema:
          type: string
          format: date
      - in: query
        name: impression
        schema:
          type: string
          title: General impression
          enum:
          - '1'
          - '2'
          - '3'
        description: |-
          Your impression about this workout session. Did you exercise as well as you could?

          * `1` - Bad
          * `2` - Neutral
          * `3` - Good
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: notes
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: routine
        schema:
          type: integer
      - in: query
        name: time_end
        schema:
          type: string
          format: time
      - in: query
        name: time_start
        schema:
          type: string
          format: time
      tags:
      - workoutsession
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWorkoutSessionList'
          description: ''
    post:
      operationId: workoutsession_create
      description: Check for creation (PUT, POST)
      tags:
      - workoutsession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WorkoutSessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WorkoutSessionRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
          description: ''
  /api/v2/workoutsession/{id}/:
    get:
      operationId: workoutsession_retrieve
      description: API endpoint for workout sessions objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout session.
        required: true
      tags:
      - workoutsession
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
          description: ''
    put:
      operationId: workoutsession_update
      description: Check for updates (PUT, PATCH)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout session.
        required: true
      tags:
      - workoutsession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WorkoutSessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WorkoutSessionRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
          description: ''
    patch:
      operationId: workoutsession_partial_update
      description: API endpoint for workout sessions objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout session.
        required: true
      tags:
      - workoutsession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWorkoutSessionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWorkoutSessionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWorkoutSessionRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
          description: ''
    delete:
      operationId: workoutsession_destroy
      description: API endpoint for workout sessions objects
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this workout session.
        required: true
      tags:
      - workoutsession
      security:
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
