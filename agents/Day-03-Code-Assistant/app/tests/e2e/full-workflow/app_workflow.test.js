/**
 * End-to-end tests for the full workflow of the Repository Analysis Agent
 */

const RepositoryAnalysisAgent = require('../../../src/app');
const nock = require('nock');
const path = require('path');
const mock = require('mock-fs');

describe('Repository Analysis Agent End-to-End', () => {
  // Setup and teardown
  beforeAll(() => {
    // Mock environment variables
    process.env.GITHUB_TOKEN = 'mock-github-token';
    process.env.OPENAI_API_KEY = 'mock-openai-api-key';
    process.env.ISSUE_DRY_RUN = 'true'; // Ensure no actual issues are created
  });

  afterAll(() => {
    // Restore environment
    delete process.env.GITHUB_TOKEN;
    delete process.env.OPENAI_API_KEY;
    delete process.env.ISSUE_DRY_RUN;
  });

  beforeEach(() => {
    // Setup mock file system with configuration and sample repository
    mock({
      'config': {
        'default.yaml': `
repository:
  owner: "test-owner"
  repo: "test-repo"
  branch: "main"
analysis:
  maxFilesToAnalyze: 10
  analysisDepth: "light"
ai:
  provider: "openai"
  model: "gpt-4"
issue:
  createIssues: true
  maxIssuesToCreate: 5
  dryRun: true
`,
        '.credentials.yaml': '# Mock encrypted credentials'
      },
      'repos/test-owner/test-repo': {
        'src': {
          'app.js': `
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello World!');
});

// TODO: Add error handling
app.listen(3000, () => {
  console.log('Server started on port 3000');
});
          `,
          'utils': {
            'helper.js': `
// This function has a bug - it doesn't handle February in leap years correctly
function daysInMonth(month, year) {
  return new Date(year, month, 0).getDate();
}

// This function could be more efficient with a more optimized algorithm
function fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

module.exports = {
  daysInMonth,
  fibonacci
};
            `
          }
        },
        'package.json': `
{
  "name": "test-repo",
  "version": "1.0.0",
  "description": "Test repository for e2e tests",
  "main": "src/app.js",
  "scripts": {
    "start": "node src/app.js",
    "test": "jest"
  },
  "dependencies": {
    "express": "^4.17.1"
  }
}
        `,
        '.git': {
          'HEAD': 'ref: refs/heads/main'
        }
      },
      'templates': {
        'issue_template.md': `
# {title}

## Issue Description

{description}

## Location

{location}

## Suggested Solution

{suggestion}

## Priority

**{priority}**

---
*This issue was automatically generated by the Repository Analysis Agent.*
        `
      },
      'storage': {}
    });

    // Mock GitHub API
    nock('https://api.github.com')
      .get('/repos/test-owner/test-repo')
      .reply(200, {
        name: 'test-repo',
        description: 'Test repository for e2e tests',
        owner: {
          login: 'test-owner'
        }
      });

    // Mock OpenAI API responses
    nock('https://api.openai.com')
      .post('/v1/chat/completions')
      .reply(200, {
        choices: [{
          message: {
            content: JSON.stringify({
              findings: [
                {
                  title: 'Missing error handling in Express server',
                  description: 'The Express server does not have error handling middleware, which could lead to unhandled exceptions.',
                  location: 'app.js, line 10',
                  suggestion: 'Add error handling middleware using app.use((err, req, res, next) => {...})',
                  priority: 'Medium'
                },
                {
                  title: 'Inefficient fibonacci implementation',
                  description: 'The fibonacci function uses recursive calls which leads to exponential time complexity.',
                  location: 'utils/helper.js, line 7-10',
                  suggestion: 'Implement an iterative solution with O(n) time complexity.',
                  priority: 'Low'
                },
                {
                  title: 'Bug in daysInMonth function',
                  description: 'The daysInMonth function does not handle February in leap years correctly.',
                  location: 'utils/helper.js, line 3-5',
                  suggestion: 'Implement a proper leap year check for February.',
                  priority: 'High'
                }
              ]
            })
          }
        }]
      });
  });

  afterEach(() => {
    // Restore real file system
    mock.restore();
    // Clean up nock
    nock.cleanAll();
  });

  // Tests
  test('should analyze repository and generate findings', async () => {
    // Arrange
    const agent = new RepositoryAnalysisAgent({
      config: {
        configPath: path.resolve('config'),
        configFile: 'default.yaml'
      },
      storage: {
        storagePath: path.resolve('storage')
      }
    });

    // Act
    const result = await agent.analyzeRepository('test-owner', 'test-repo', {
      dryRun: true
    });

    // Assert
    expect(result).toBeDefined();
    expect(result.success).toBe(true);
    expect(result.repositoryInfo).toBeDefined();
    expect(result.findings).toBeDefined();
    expect(result.findings.length).toBeGreaterThan(0);
    
    // Check report
    expect(result.report).toBeDefined();
    expect(result.report.summary.totalFindings).toBeGreaterThan(0);
    
    // Check findings properties
    const finding = result.findings[0];
    expect(finding.title).toBeDefined();
    expect(finding.description).toBeDefined();
    expect(finding.priority).toBeDefined();
  });

  test('should handle analysis errors gracefully', async () => {
    // Arrange
    // Mock GitHub API to return an error
    nock.cleanAll();
    nock('https://api.github.com')
      .get('/repos/nonexistent/repo')
      .reply(404, {
        message: 'Not Found'
      });
    
    const agent = new RepositoryAnalysisAgent({
      config: {
        configPath: path.resolve('config'),
        configFile: 'default.yaml'
      }
    });

    // Act
    const result = await agent.analyzeRepository('nonexistent', 'repo');

    // Assert
    expect(result).toBeDefined();
    expect(result.success).toBe(false);
    expect(result.error).toBeDefined();
  });
});