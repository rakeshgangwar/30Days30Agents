"""
Tests for the AI content generator.
"""
import pytest
from unittest.mock import patch, MagicMock

from app.core.ai.generator import ContentGenerator
from app.db.models.persona import Persona


@pytest.fixture
def mock_persona():
    """Create a mock persona for testing."""
    return Persona(
        id=1,
        name="Test Persona",
        background="A test persona for unit tests",
        interests=["Testing", "Python", "FastAPI"],
        values=["Quality", "Reliability"],
        tone="Professional",
        expertise=["Software Testing", "API Development"],
        purpose="To test the application"
    )


@pytest.fixture
def content_generator():
    """Create a content generator instance for testing."""
    with patch('app.core.ai.client.OpenAIClient') as mock_client:
        mock_instance = MagicMock()
        mock_client.return_value = mock_instance
        mock_instance.generate_content.return_value = "This is a test tweet generated by the mock AI."
        
        generator = ContentGenerator()
        yield generator


def test_generate_tweet(content_generator, mock_persona):
    """Test generating a tweet."""
    content = content_generator.generate_tweet(
        persona=mock_persona,
        topic="artificial intelligence",
        additional_context="Focus on recent advancements in AI and their ethical implications.",
        max_length=280
    )
    
    assert content is not None
    assert isinstance(content, str)
    assert len(content) > 0
    assert len(content) <= 280


def test_generate_linkedin_post(content_generator, mock_persona):
    """Test generating a LinkedIn post."""
    content = content_generator.generate_linkedin_post(
        persona=mock_persona,
        topic="professional development",
        additional_context="Focus on skills needed for the future of work.",
        max_length=1000
    )
    
    assert content is not None
    assert isinstance(content, str)
    assert len(content) > 0
    assert len(content) <= 1000


def test_generate_blog_post(content_generator, mock_persona):
    """Test generating a blog post."""
    content = content_generator.generate_blog_post(
        persona=mock_persona,
        topic="software testing",
        additional_context="Focus on best practices for API testing.",
        max_length=5000
    )
    
    assert content is not None
    assert isinstance(content, str)
    assert len(content) > 0
    assert len(content) <= 5000


def test_generate_with_invalid_content_type(content_generator, mock_persona):
    """Test generating content with an invalid content type."""
    with pytest.raises(ValueError):
        content_generator.generate_content(
            persona=mock_persona,
            content_type="invalid_type",
            topic="testing",
            additional_context="This should fail.",
            max_length=280
        )
